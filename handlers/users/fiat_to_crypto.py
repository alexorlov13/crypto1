from aiogram import types
from aiogram.types import *
from data.config import *
from loader import dp, bot
from keyboards import inline_keyboards as ikb
from utils.database import *
from states.state import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text


#–æ–±–º–µ–Ω —Ñ–∏–∞—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç—É


@dp.callback_query_handler(text_startswith="fiat_to_crypto")
async def fiat_to_crypto_handler(call: types.CallbackQuery):
    
    with DB() as db:
        list_key = db.give_keyboard_valute(type_valute='fiat')

    await Exchange1.valute_exhcnage.set()

    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å', reply_markup=ikb.exchange_user(valute_list=list_key, type_='fiat'))


@dp.callback_query_handler(Text(startswith='exchange_'), state = Exchange1.valute_exhcnage)
async def set_excahnge_fiat(call: types.CallbackQuery, state: FSMContext):

    msg = call.data.replace('exchange_', '')

    async with state.proxy() as data:
        data['valute_exhcnage'] = msg

    with DB() as db:
        list_key = db.give_keyboard_valute(type_valute='crypto')

    await Exchange1.valute_issue.set()

    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å', reply_markup=ikb.exchange_user(valute_list=list_key, type_='crypto'))
    

@dp.callback_query_handler(Text(startswith='exchange_'), state = Exchange1.valute_issue)
async def set_issue(call: types.CallbackQuery, state: FSMContext):

    msg = call.data.replace('exchange_', '')

    async with state.proxy() as data:
        data['valute_issue'] = msg
        name = data['valute_exhcnage']

    await Exchange1.payment_method.set()

    with DB() as db:
        req = db.give_payment_method(type='fiat')

    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–ø–ª–∞—Ç—ã:', reply_markup=ikb.give_payment_method_key(type_=req))


@dp.callback_query_handler(Text(startswith='pmethod_'), state = Exchange1.payment_method)
async def set_issue(call: types.CallbackQuery, state: FSMContext):

    msg = call.data.replace('pmethod_', '')

    async with state.proxy() as data:
        data['payment_method'] = msg
        name = data['valute_exhcnage']

    await Exchange1.amount.set()

    with DB() as db:
        req = db.give_min_and_max(name=name)

    await call.message.edit_text(f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][0]}\n'
                                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][1]}\n'
                                f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ {name}, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:', reply_markup=ikb.back_to_menu)


@dp.message_handler(state = Exchange1.amount)
async def set_issue(message: types.Message, state: FSMContext):

    msg = message.text

    try:
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id-1)

    except:
        pass

    async with state.proxy() as data:
        name = data['valute_exhcnage']

    with DB() as db:
        req = db.give_min_and_max(name=name)

    try:
        amount = float(msg)

        if amount < float(req[0][0]) or amount > float(req[0][1]):
            await message.answer(text=f'–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º—É–º—É –∏ –º–∞–∫—Å–∏–º—É–º—É –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã\n'
                                f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][0]}\n'
                                f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][1]}\n'
                                f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ {name}, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:', reply_markup=ikb.back_to_menu)

        else:
            async with state.proxy() as data:
                data['amount'] = amount

            await Exchange1.requisites.set()

            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã–ø–ª–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=ikb.back_to_menu)

    except Exception as e:
        await message.answer(f'–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —á–∏—Å–ª–æ!\n'
                            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][0]}\n'
                            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ {name}: {req[0][1]}\n'
                            f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ {name}, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:', reply_markup=ikb.back_to_menu)


@dp.message_handler(state = Exchange1.requisites)
async def set_requisites(message: types.Message, state: FSMContext):

    msg = message.text

    try:
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id-1)

    except:
        pass

    async with state.proxy() as data:
        data['requisites'] = msg

    await Exchange1.comment.set()

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω —Ç—É—Ç –Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª:', reply_markup=ikb.back_to_menu)


@dp.message_handler(state = Exchange1.comment)
async def set_comment(message: types.Message, state: FSMContext):

    msg = message.text

    id = message.from_id

    try:
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id = message.chat.id, message_id=message.message_id-1)

    except:
        pass

    async with state.proxy() as data:
        data['comment'] = msg
        valute_exhcnage = data['valute_exhcnage']
        valute_issue = data['valute_issue']
        payment_method = data['payment_method']
        amount = data['amount']
        requisites = data['requisites']
        
    application = f'''
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

üîÑ –ù—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å {valute_exhcnage} –Ω–∞ {valute_issue}
üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ {payment_method}
üí∞ –ö–æ–ª–ª–∏—á–µ—Å—Ç–æ–≤ {valute_exhcnage}: {amount}
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}
‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {msg}

üó≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ?
'''

    await Exchange1.send_to_false.set()

    await message.answer(application, reply_markup=ikb.send_admin_key)
        
    
@dp.callback_query_handler(Text(startswith='asend'), state = Exchange1.send_to_false)
async def set_send_to_false(call: types.CallbackQuery, state: FSMContext):

    id = call.from_user.id

    async with state.proxy() as data:
        valute_exhcnage = data['valute_exhcnage']
        valute_issue = data['valute_issue']
        payment_method = data['payment_method']
        amount = data['amount']
        requisites = data['requisites']
        comment = data['comment']

    await state.finish()

    await call.message.edit_text('‚úÖ –í–∞—à–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.', reply_markup=ikb.main_menu_inline)

    for id_ in ANKET_SEND:
        text = f'''
–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

üÜî: <code>{id}</code>
üëæ Username: @{call.from_user.username}
üë§ –ò–º—è: <code>{call.from_user.full_name}</code>

üîÑ –ù—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å {valute_exhcnage} –Ω–∞ {valute_issue}
üí∏ –í—ã–ø–ª–∞—Ç–∏—Ç—å –Ω–∞ {payment_method}
üí∞ –ö–æ–ª–ª–∏—á–µ—Å—Ç–æ–≤ {valute_exhcnage}: {amount}
üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {requisites}
‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}'''

        await bot.send_message(id_, text, reply_markup=ikb.anket_user(id=id, exchange=f'{valute_exhcnage}_{valute_issue}', amount=amount))