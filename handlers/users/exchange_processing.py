from aiogram import types
from aiogram.types import *
from data.config import *
from loader import dp, bot
from keyboards import inline_keyboards as ikb
from utils.database import *
from states.state import *
from aiogram.dispatcher.filters import Text
from datetime import date


#–ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞


@dp.callback_query_handler(Text(startswith='anket_'))
async def set_anket(call: types.CallbackQuery):

    msg = call.data
    msg_text = call.message.text.split('\n')

    if 'anket_false' in msg:
        await call.message.edit_text(f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                                f'{msg_text[2]}\n{msg_text[3]}\n{msg_text[4]}\n\n'
                                f'{msg_text[9]}\n'
                                f'{msg_text[8]}', reply_markup=ikb.close_key)

        msg = msg.split('_')

        text = f'''
üòî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±–º–µ–Ω–∞ {msg[5]} {msg[3]} –Ω–∞ {msg[4]} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.'''

        await bot.send_message(int(msg[2]), text, reply_markup=ikb.close_key)

    else:
        await call.message.edit_text(f'–í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞—è–≤–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                                f'{msg_text[2]}\n{msg_text[3]}\n{msg_text[4]}\n\n'
                                f'{msg_text[9]}\n'
                                f'{msg_text[8]}', reply_markup=ikb.close_key)

        msg = msg.split('_')

        with DB() as db:
            req = db.give_info_valute(name=f'{msg[2]}')

        exchange = f'{msg[2]}_{msg[3]}'

        await bot.send_message(int(msg[1]), f'üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±–º–µ–Ω–∞ <code>{msg[2]}</code> –Ω–∞ <code>{msg[3]}</code> –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <code>{msg[4]}</code> {msg[2]} –Ω–∞ —Å–ª–µ–¥—É—â–∏–π –∞–¥—Ä–µ—Å:\n'
                                        f'<code>{str(req[0][0])}</code>\n'
                                        f'–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=ikb.anket_step_two(exchange, amount=msg[4]))


@dp.callback_query_handler(Text(startswith='usanket_'))
async def true_anket(call: types.CallbackQuery):

    msg = call.data.split('_')

    if msg[1] == 'false':
        await call.message.edit_text('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–¥–µ–ª–∫—É', reply_markup=ikb.close_key)

        for i in ADMIN_ID:
            await bot.send_message(int(i), '‚ùï –£–≤–µ–¥–æ–º–æ–µ–Ω–∏–µ\n\n'
                                            'üòï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Å–¥–µ–ª–∫—É:\n'
                                            f'üÜî: <code>{call.from_user.id}</code>\n'
                                            f'üëæ Username: @{call.from_user.username}\n'
                                            f'üë§ –ò–º—è: <code>{call.from_user.full_name}</code>\n\n', reply_markup=ikb.close_key)

    else:
        await call.message.edit_text('–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–∞–ø–ø–æ—Ä—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', reply_markup=ikb.supprot_key)

        for id_ in ANKET_SEND:

            text = f'''
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∏–ª –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:
üÜî: <code>{call.from_user.id}</code>
üëæ Username: @{call.from_user.username}
üë§ –ò–º—è: <code>{call.from_user.full_name}</code>
–û–±–º–µ–Ω {msg[4]} {msg[2]} –Ω–∞ {msg[3]}
'''

            await bot.send_message(int(id_), text, reply_markup=ikb.confirm_exchange(id=call.from_user.id, exchange=f'{msg[2]}_{msg[3]}', amount=f'{msg[4]}'))


@dp.callback_query_handler(Text(startswith='confirm_'))
async def confirm_anket(call: types.CallbackQuery):

    msg = call.data.split('_')

    if msg[1] == 'false':
        await call.message.edit_text('‚ÅâÔ∏è –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–∞–ø–ø–æ—Ä—Ç—É —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å —Å–µ—Ä–¥—Å—Ç–≤–∞.', reply_markup=ikb.close_key)

        await bot.send_message(int(msg[2]), f'‚ùì –ü–æ –∫–∞–∫–∏–º —Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –í–∞—à –æ–±–º–µ–Ω {msg[3]} {msg[4]} –Ω–∞ {msg[5]} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–ø–ø–æ—Ä—Ç—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=ikb.supprot_key)

    else:
        await call.message.edit_text('‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω.', reply_markup=ikb.close_key)

        await bot.send_message(int(msg[2]), 'üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', reply_markup=ikb.close_key)

        dt_now = date.today()

        with DB() as db:
            a = db.add_history(amount=msg[3], id=msg[2], name_exchange=msg[4])

        if a:
            await call.message.edit_text('‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω, —Å–¥–µ–ª–∫–∞ –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.', reply_markup=ikb.close_key)
        
        else:
            await call.message.edit_text('‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω, –Ω–æ –ø–æ –∫–∞–∫–∏–º —Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º —Å–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–Ω–µ—Å–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.', reply_markup=ikb.close_key)



