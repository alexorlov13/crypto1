from aiogram import types
from aiogram.types import *
from data.config import *
from loader import dp, bot
from utils.database import *
from utils.statistic_func import *
from keyboards import inline_keyboards as ikb
from aiogram.dispatcher import FSMContext
from states.state import *


#–∑–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏



@dp.message_handler(user_id = ADMIN_ID, commands=['admin'])
async def admin_panel(msg: types.Message):
	
	await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=ikb.admin_panel_key)


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='aspam')
async def aspam_func(call: types.CallbackQuery):

	await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Ä–∞—Å—Å—ã–ª–∫–∏\n–° –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –≥–∏—Ñ–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', reply_markup=ikb.spam_key)


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='time_')
async def time_func(call: types.CallbackQuery):

	msg = call.data.replace('time_', '')

	with DB() as db:
		db_list = db.give_custom_history_db()

	ret = custom_stat_func(db_list, time=msg)

	await call.message.edit_text(ret, reply_markup=ikb.stat_back)


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='statistic')
async def statistic_func(call: types.CallbackQuery):

	with DB() as db:
		db_list = db.give_custom_history_db()

	with DB() as db:
		users = db.stat_user()

	activee = []
	noactive = []

	for i in users:
		if i[1] == '1':
			activee.append('1')
		else:
			noactive.append('0')

	a = all_stat(db_list)

	text = f'''
–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {len(users)}
–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(activee)}
–ù–µ–∞–∫—Ç–∏–≤: {len(noactive)}
{a}'''
	
	await call.message.edit_text(text, reply_markup=ikb.stat_time)



@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='status')
async def bot_func(call: types.CallbackQuery):

	with DB() as db:
		r = db.give_status_bot()

	await call.message.edit_text('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ', reply_markup=ikb.status_bot(status=r[0][1]))


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='sbot_')
async def sbot_func(call: types.CallbackQuery):

	msg = call.data.replace('sbot_', '')

	with DB() as db:
		r = db.on_off_bot(status=msg)

	with DB() as db:
		rr = db.give_status_bot()

	if r:
		await call.message.edit_text('‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=ikb.status_bot(status=rr[0][1])) 

	else:
		await call.message.edit_text('‚ùóÔ∏è –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º', reply_markup=ikb.status_bot(status=rr[0][1])) 


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='adbanner')
async def banner_func(call: types.CallbackQuery):

	if call.data == 'adbanner_true':
		await Banner.text.set()

		await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ 190 —Å–∏–º–≤–æ–ª–æ–≤', reply_markup=ikb.admin_menu)

	else:		
		with DB() as db:
			r = db.move_banner(move='delete', text='false')

		if r:
			await call.answer('‚úÖ –ë–∞–Ω–Ω–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.')
		
		else:
			await call.message.edit_text('‚ùï –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–Ω –∏–ª–∏ –Ω–µ—Ç\n–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä —Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –±–∞–Ω–Ω–µ—Ä —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π', reply_markup=ikb.admin_panel_key)


@dp.message_handler(state = Banner.text)
async def delete_channel(msg: types.Message, state = FSMContext):

	text = msg.text

	await state.finish()

	if len(text) > 190:
		await msg.answer(f'–í –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 190 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=ikb.admin_panel_key)

	else:
		with DB() as db:
			r = db.move_banner(move='add', text=text)

		if r:
			await msg.answer('‚úÖ –ë–∞–Ω–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É', reply_markup=ikb.admin_panel_key)
		
		else:
			await msg.answer('‚ùï –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–Ω–Ω–µ—Ä –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–Ω –∏–ª–∏ –Ω–µ—Ç\n–ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–Ω–µ—Ä —Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –±–∞–Ω–Ω–µ—Ä —á—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π', reply_markup=ikb.admin_panel_key)


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='antiban')
async def antiban_func(call: types.CallbackQuery):

	await AntiBan.antiban_id.set()

	await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å', reply_markup=ikb.admin_menu)


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='channel')
async def channel_func(call: types.CallbackQuery, state: FSMContext):	

	if call.data == 'channel_add':
		await Channel.channel_info.set()

		await call.message.edit_text('‚ûï –ß—Ç–æ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞ –∏ –µ–≥–æ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n-1001814613390 https://t.me/roegjreiog', reply_markup=ikb.admin_menu)

	else:
		await Channel.delet_channel.set()

		await call.message.edit_text('‚ûï –ß—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ id –∫–∞–Ω–∞–ª–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n-1001814613390', reply_markup=ikb.admin_menu)


@dp.message_handler(state = Channel.delet_channel)
async def delete_channel(msg: types.Message, state = FSMContext):

	text = msg.text

	await state.finish()

	with DB() as db:
		r = db.delete_channel(id=text)

	if r:
		await msg.answer('üëç –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
	
	else:
		await msg.answer('‚ùï –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç—É –≤ –±–∞–∑–µ.')


@dp.message_handler(state = Channel.channel_info)
async def set_channel(msg: types.Message, state = FSMContext):

	text = msg.text

	await state.finish()

	text = text.split(' ')

	with DB() as db:
		r = db.add_channel(id_channel=text[0], url=text[1])

	if r:
		await msg.answer('üëç –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
	
	else:
		await msg.answer('‚ùï –ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–≤–∞–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...')


@dp.callback_query_handler(user_id = ADMIN_ID, text_startswith='ban_user')
async def statsric_func(call: types.CallbackQuery, state: FSMContext):

	await Ban.ban_id.set()

	await call.message.edit_text('‚ûï –í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –±–∞–Ω', reply_markup=ikb.admin_menu)


@dp.message_handler(user_id = ADMIN_ID, state=Ban.ban_id)
async def ban_user(msg: types.Message, state: FSMContext):

	message = msg.text

	await state.finish()

	with DB() as db:
		req = db.ban_user(id=message)

	if req:
		await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!', reply_markup=ikb.admin_panel_key)

	else:
		await msg.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=ikb.admin_panel_key)


@dp.message_handler(user_id = ADMIN_ID, state=AntiBan.antiban_id)
async def anti_ban_user(msg: types.Message, state: FSMContext):

	message = msg.text

	await state.finish()

	with DB() as db:
		req = db.anti_ban_user_to_db(id=message)

	if req:
		await msg.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!', reply_markup=ikb.admin_panel_key)

	else:
		await msg.answer(f'–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup=ikb.admin_panel_key)
